factorial:
	push rBP
	rBP = rSP
	rSP -= 16
	
	mem[rBP-16] = 1 	#output value = 1
fact_loop:
	rAX = mem[rBP+16]
	if rAX <= 0 goto end_fact
	
	rAX = mem[rBP+16]
	rBX = mem[rBP-16]
	rAX *= rBX
	mem[rBP-16] = rAX	#output = fact_count * output
	
	rAX = mem[rBP+16]
	rAX--
	mem[rBP+16] = rAX	#fact_count--
	
	goto fact_loop
end_fact:
	rAX = mem[rBP-16]	#puts output value into rAX to return
	rSP = rBP
	rBP = pop
	return
#n! / (k! * (n-k)!)
main:
	push rBP
	rBP = rSP
	rSP -= 48
	
	rAX = in
	mem[rBP-8] = rAX	#store n
	rAX = in
	mem[rBP-16] = rAX	#store k
	
	rSP -= 8
	rAX = mem[rBP-8]
	push rAX
	call factorial
	rSP += 16
	mem[rBP-24]	= rAX	#store n!

	rSP -= 8
	rAX = mem[rBP-16]
	push rAX
	call factorial
	rSP += 16
	mem[rBP-32]	= rAX	#store k!
	
	rSP -= 8
	rBX = mem[rBP-16]
	rAX = mem[rBP-8]
	rAX -= rBX			#n-k
	push rAX
	call factorial
	rSP += 16
	mem[rBP-40] = rAX
	
	rAX = mem[rBP-40]
	rBX = mem[rBP-32] 
	rAX *= rBX 			#k! * (n-k)!
	mem[rBP-48] = rAX
	
	rAX = mem[rBP-24]
	rBX = mem[rBP-48]
	rAX /= rBX
	out rAX			#output final result
	
	rSP = rBP
	rBP = pop
	return