factorial:
	push rBP
	rBP = rSP
	rSP -= 16
	
	rDX = rDI	#store fact_count
	rAX = 1 	#output value = 1
fact_loop:
	if rDX <= 0 goto end_fact
	
	rAX *= rDX		#output *= fact_count
	
	rDX--			#fact_count--
	
	goto fact_loop
	
end_fact:
	rSP = rBP
	rBP = pop
	return
#n! / (k! * (n-k)!)
main:
	push rBP
	rBP = rSP
	rSP -= 32
	
	rAX = in
	mem[rBP-8] = rAX	#store n
	rBX = in
	mem[rBP-16] = rBX	#store k
	
	rDI = mem[rBP-8]
	call factorial
	mem[rBP-24]	= rAX	#store n!

	rDI = mem[rBP-16]
	call factorial
	mem[rBP-32]	= rAX	#store k!
	
	rBX = mem[rBP-16]
	rDI = mem[rBP-8]
	rDI -= rBX			#n-k
	call factorial
	
	rBX = mem[rBP-32] 
	rAX *= rBX			#k! * (n-k)!
	
	rDX = mem[rBP-24]
	rBX = rAX
	rDX /= rBX
	
	out rDX		#output final result
	
	rSP = rBP
	rBP = pop
	return